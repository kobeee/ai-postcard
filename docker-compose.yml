services:
  # =============================================================================
  # 基础设施服务 (无 profile，默认启动)
  # =============================================================================
  
  postgres-db:
    image: postgres:15-alpine
    container_name: ai-postcard-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-ai_postcard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ai_postcard}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cache:
    image: redis:7-alpine
    container_name: ai-postcard-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # 应用服务 (使用 profiles 进行场景化启动)
  # =============================================================================

  # 使用 YAML 锚点定义可复用的基础配置
  x-gateway-base: &gateway-base
    build:
      context: ./src/gateway-service
      dockerfile: Dockerfile.dev
    volumes:
      # 挂载整个服务目录，包括源代码和 node_modules
      - ./src/gateway-service:/app
      # 如果遇到跨平台二进制兼容问题，可启用下面的匿名卷
      # - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ai_postcard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  gateway-service:
    <<: *gateway-base
    profiles: ["gateway"]
    container_name: ai-postcard-gateway
    ports:
      - "8080:8080"
    command: npm run dev

  # --- User Service 场景化配置 ---
  x-user-base: &user-base
    build:
      context: ./src/user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./src/user-service:/app
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ai_postcard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  user-service:
    <<: *user-base
    profiles: ["user"]
    container_name: ai-postcard-user
    ports:
      - "8081:8080"

  user-service-tests:
    <<: *user-base
    profiles: ["user-tests"]
    container_name: ai-postcard-user-tests
    command: sh -c "echo 'Running user-service tests (placeholder)'; sleep 5"

  # --- Postcard Service 场景化配置 ---
  x-postcard-base: &postcard-base
    build:
      context: ./src/postcard-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./src/postcard-service:/app
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ai_postcard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  postcard-service:
    <<: *postcard-base
    profiles: ["postcard"]
    container_name: ai-postcard-postcard
    ports:
      - "8082:8080"

  postcard-service-tests:
    <<: *postcard-base
    profiles: ["postcard-tests"]
    container_name: ai-postcard-postcard-tests
    command: sh -c "echo 'Running postcard-service tests (placeholder)'; sleep 5"

  # --- AI Agent Service 场景化配置 ---
  x-ai-agent-base: &ai-agent-base
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile.dev
    volumes:
      # 挂载整个服务目录，包括源代码和 .venv
      - ./src/ai-agent-service:/app
    environment:
      # 确保容器内的 Python 知道使用虚拟环境
      - PATH=/app/.venv/bin:$PATH
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres-db:5432/${DB_NAME:-ai_postcard}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis-cache:6379/0
      - AI_API_KEY=${AI_API_KEY:-}
      - AI_BASE_URL=${AI_BASE_URL:-}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  ai-agent-service:
    <<: *ai-agent-base
    profiles: ["agent"]
    container_name: ai-postcard-agent
    ports:
      - "8001:8000"
    command: sh -c ". .venv/bin/activate && pip install --timeout=30 fastapi uvicorn pydantic python-dotenv && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  ai-agent-service-tests:
    <<: *ai-agent-base
    profiles: ["agent-tests"]
    container_name: ai-postcard-agent-tests
    command: pytest -v

  ai-agent-service-script:
    <<: *ai-agent-base
    profiles: ["agent-script"]
    container_name: ai-postcard-agent-script
    # 允许通过环境变量动态传入要执行的命令
    command: sh -c "${SCRIPT_COMMAND:-echo 'No command provided. Exiting.'}"

# =============================================================================
# 数据卷定义
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# =============================================================================
# 网络定义 (可选，使用默认网络)
# =============================================================================
networks:
  default:
    name: ai-postcard-network
