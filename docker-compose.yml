# =============================================================================
# AI 明信片项目 - Docker Compose 配置
# =============================================================================
# 统一的服务配置，简单高效，一套镜像到处跑
# =============================================================================

x-common: &common
  env_file: .env
  networks: [app-network]
  restart: unless-stopped
  # 全局DNS配置，解决容器内DNS解析问题
  dns:
    - 8.8.8.8
    - 8.8.4.4
    - 114.114.114.114
  dns_search:
    - .

x-app-service: &app-service
  <<: *common
  user: "0:0"
  depends_on:
    postgres: { condition: service_healthy }
    redis: { condition: service_healthy }

services:
  # =============================================================================
  # 基础设施服务
  # =============================================================================
  postgres:
    <<: *common
    image: postgres:15-alpine
    container_name: ai-postcard-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-ai_postcard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports: ["${DB_PORT:-5432}:5432"]
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backups/postgres:/backups
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    <<: *common
    image: redis:7-alpine
    container_name: ai-postcard-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes --dir /data
    ports: ["${REDIS_PORT:-6379}:6379"]
    volumes:
      - ./data/redis:/data
      - ./backups/redis:/backups
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # 应用服务
  # =============================================================================
  gateway-service:
    <<: *app-service
    container_name: ai-postcard-gateway-service
    build:
      context: ./src/gateway-service
      dockerfile: Dockerfile
      network: host  # 使用主机网络进行构建，避免DNS问题
    ports: ["${GATEWAY_PORT:-8083}:8000"]
    volumes: [./logs/gateway:/app/logs]
    profiles: [gateway, all]

  user-service:
    <<: *app-service
    container_name: ai-postcard-user-service
    build:
      context: ./src/user-service
      dockerfile: Dockerfile
      network: host
    ports: ["${USER_PORT:-8081}:8000"]
    volumes: [./logs/user:/app/logs]
    profiles: [user, all]

  postcard-service:
    <<: *app-service
    container_name: ai-postcard-postcard-service
    build:
      context: ./src/postcard-service
      dockerfile: Dockerfile
      network: host
    ports: ["${POSTCARD_PORT:-8082}:8000"]
    volumes: [./logs/postcard:/app/logs]
    profiles: [postcard, all]

  ai-agent-service:
    <<: *app-service
    container_name: ai-postcard-ai-agent-service
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile
      network: host
    ports: ["${AI_AGENT_PORT:-8080}:8000"]
    volumes:
      - ./logs/ai-agent:/app/logs
      - ./data/ai-agent/static:/app/app/static
    environment:
      AI_AGENT_PUBLIC_URL: ${AI_AGENT_PUBLIC_URL}
    profiles: [agent, all]

  ai-agent-worker:
    <<: *app-service
    container_name: ai-postcard-ai-agent-worker
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile
      network: host
    command: ["python", "-m", "app.worker"]
    volumes:
      - ./logs/ai-agent:/app/logs
      - ./data/ai-agent/static:/app/app/static
    profiles: [worker, all]

  # =============================================================================
  # 测试服务
  # =============================================================================
  user-service-tests:
    <<: *common
    container_name: ai-postcard-user-tests
    build:
      context: ./src/user-service
      dockerfile: Dockerfile
      network: host
    command: ["pytest", "-v"]
    depends_on: [postgres, redis]
    profiles: [user-tests]

  postcard-service-tests:
    <<: *common
    container_name: ai-postcard-postcard-tests
    build:
      context: ./src/postcard-service
      dockerfile: Dockerfile
      network: host
    command: ["pytest", "-v"]
    depends_on: [postgres, redis]
    profiles: [postcard-tests]

  ai-agent-service-tests:
    <<: *common
    container_name: ai-postcard-agent-tests
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile
      network: host
    command: ["pytest", "-v"]
    depends_on: [postgres, redis]
    profiles: [agent-tests]

# =============================================================================
# 网络
# =============================================================================
networks:
  app-network:
    name: ai-postcard-network
    driver: bridge
