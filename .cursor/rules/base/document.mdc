---
alwaysApply: true
---
# 文档规范

## 通用要求
- 所有文档使用Markdown格式
- 使用简洁、清晰的语言
- 文档内容应保持最新
- 避免拼写和语法错误
- 使用中文作为主要语言

## 目录结构
- `src/`：源代码目录
- `README.md`：项目根目录，提供项目概述
- `docs/`：存放详细文档
  - `guide/`：使用指南
  - `api/`：API文档
  - `examples/`：示例代码文档
  - `prd/`：需求prd文档
  - `design/`：设计文档
  - `ideas/`：创意文档
  - `tests/`：测试与验证文档根目录（新增）
    - `validation/`：验证步骤文档（将测试验证操作转为文档化记录）
- `tests/`：项目整体的测试代码文档，**注意，由于模块的独立性，模块内部也会有独立的tests测试目录，不要混淆！**

## README.md 内容规范
- 项目名称和简短描述
- 技术栈说明
- 项目结构说明
- 使用说明
- 许可证信息

## 开发记录规范
- 使用 `CHANGELOG.md` 记录每次开发的内容，包括做了什么事情、加了什么功能、修复了什么问题、改了哪些文件和代码等等
- **每次都以换行追加到末尾的方式，即最末尾的为最新的更新记录**
- 结构脉络清晰，可以区分模块功能，切勿像记流水账一样，要完整记录上下文背景和思考过程
- 这是一份开发记录历史快照，用来记录我们的整个开发过程，方便日后审计和回溯，有助于我们对整个项目的管控

## 版本记录规范
- 使用 `VERSION.md` 记录版本变更
- 遵循语义化版本（Semantic Versioning）规范
- 每个版本应包含：新增功能、修复问题、破坏性变更

## 文档内容组织
- 从整体到局部，从简单到复杂
- 重要信息放在前面
- 相关内容应当放在一起
- 使用小标题和列表增强可读性
- 避免过长段落，保持内容简洁

## 代码示例规范
- 提供完整可运行的示例
- 代码应当简洁且易于理解
- 添加适当的注释解释关键部分
- 说明代码的预期输出或行为
- 更新示例以匹配最新API

## 验证文档规范（新增）
- 路径：`docs/tests/validation/`
- 命名建议：`YYYY-MM-DD-<主题>.md`
- 内容要素：
  - 环境准备/启动/关闭
  - 日志查看位置（文件与容器）
  - 测试用例触发方式（curl/脚本）
  - 预期结果与判定标准
  - 常见问题与排查
- 原则：**默认不执行测试验证操作**；仅将验证步骤文档化，必要时按文档手动执行。





