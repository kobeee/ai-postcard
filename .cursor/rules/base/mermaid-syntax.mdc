---
globs: *.md
alwaysApply: false
---
# Mermaid.js 语法规则

为了确保在 Markdown 文件中嵌入的 Mermaid.js 图表能够被正确解析和渲染，请严格遵循以下规则，这些规则是基于实际开发中遇到的解析错误总结得出的。

## 规则 1：为所有文本添加双引号

这是最重要的一条规则。在 Mermaid 图表中，所有**节点内的文本**、**子图的标题**以及**链接上的文字**，只要包含**中文、空格、标点符号、括号、斜杠或任何非纯英文字符**，都**必须**使用双引号 `""` 将其完全包裹。

## 规则 2：确保 `end` 关键字的独立性

`end` 是 Mermaid 中用于结束 `subgraph` 等块级元素的关键字。为防止解析器混淆，**必须确保 `end` 关键字独占一行**，其前后最好有空行。

## 规则 3：子图 (subgraph) 的连接规则

这是一个非常关键且容易出错的点。

- **内部连接**: `subgraph` 代码块**内部**，只应该定义该子图所包含的节点，以及这些节点**之间**的连接。
- **跨界连接**: 从子图内的节点连接到子图外的节点（反之亦然），或者两个不同子图之间的节点连接，这些连接的定义**必须**在 `subgraph ... end` 代码块**之外**进行。

## 规则 4: 禁止在图表末尾使用多余的`end`

`graph` 或 `flowchart` 定义块本身 **不能** 以 `end` 关键字结尾。只有 `subgraph` 需要自己的 `end` 来明确其范围。这是一个很隐蔽但很常见的错误。

### 错误示例

```mermaid
graph TD
    subgraph "外部服务"
        Ext["外部节点"]
    end

    subgraph "我的服务"
        A["节点A"]
        A --> Ext  // 错误！不能在子图定义内部连接到外部节点
    end
end // 错误！顶层 graph 不需要 end
```

### 正确示例

```mermaid
graph TD
    subgraph "外部服务"
        Ext["外部节点"]
    end

    subgraph "我的服务"
        A["节点A"]
        B["节点B"]
        A --> B // 正确，这是内部连接
    end

    A --> Ext // 正确！在子图外部定义跨界连接
```

## 规则 5: 避免在标签中使用 Markdown 列表语法

在定义节点或链接的标签文本时，**绝对不要**使用数字加点号（如 `1.`、`2.`）或星号/减号（`*`、`-`）作为行的开头。Mermaid 的渲染引擎可能会将其误识别为 Markdown 的有序或无序列表，从而导致渲染失败，并显示 `Unsupported markdown: list` 的错误信息。

流程的顺序应该完全由图中的箭头和逻辑流来体现，而不是通过在标签中手动编号。

## 规则 6: 使用 `style` 语句高亮节点

为了突出图表中的关键节点或特定路径，应使用 `style` 语句来定义样式，而不是使用 `rect` 进行背景高亮。`style` 提供了更灵活和精确的控制。

- **语法**: `style <节点ID> fill:<颜色>,stroke:<边框颜色>,stroke-width:<边框宽度>px,color:<文字颜色>`
- **示例**: `style CriticalNode fill:#ff0000,stroke:#333,stroke-width:2px,color:#fff`

**⚠️ 重要限制**: 
- **节点ID不能使用引号**: 在 `style` 语句中，节点ID必须是原始标识符，不能使用双引号包裹，即使该节点在定义时使用了双引号。
- **子图样式限制**: 对于包含空格或特殊字符的子图标题（如 `subgraph "My Service"`），无法直接使用 `style` 语句设置样式。如需为子图设置样式，建议使用简单的英文标识符作为子图ID。

### 错误示例
```mermaid
graph TD
    subgraph "My Service"
        A["Node A"]
    end
    
    style "My Service" fill:#f9f9f9  // 错误！无法为带引号的子图设置样式
    style "Node A" fill:#ff0000      // 错误！style中不能使用引号
```

### 正确示例
```mermaid
graph TD
    subgraph MyService ["My Service"]
        A["Node A"]
    end
    
    style MyService fill:#f9f9f9  // 正确！使用子图的ID而非标题
    style A fill:#ff0000          // 正确！使用节点的原始ID
```

## 规则 7: 序列图中的激活/去激活平衡 ⚠️

在序列图 (sequenceDiagram) 中使用激活语法时，**必须确保每个参与者的激活和去激活是平衡的**。

- **激活语法**: 使用 `+` 激活参与者，使用 `-` 去激活参与者
- **平衡原则**: 每个 `+` 都必须有对应的 `-`
- **错误示例**: `A->>+B: message` 然后没有对应的 `B-->>-A: response`
- **正确示例**: 
  ```mermaid
  A->>+B: "请求消息"
  B-->>-A: "响应消息"
  ```

### 常见激活错误

```mermaid
sequenceDiagram
    A->>+B: "激活B"
    B->>+C: "激活C但没有去激活B" // 错误！B仍处于激活状态
    C-->>-A: "直接响应A" // 错误！试图去激活未激活的A
```

### 正确的激活模式

```mermaid
sequenceDiagram
    A->>+B: "激活B"
    B->>+C: "激活C"
    C-->>-B: "去激活C，响应B"
    B-->>-A: "去激活B，响应A"
```

## 规则 8: 避免在节点文本中使用反引号和特殊字符

在所有 Mermaid 图表的节点文本中，应避免使用可能与 Markdown 语法冲突的特殊字符：

- **避免使用**: 反引号 `` ` ``（会导致 `Unsupported markdown: codespan` 错误）、花括号 `{}`、单引号 `'`、连字符 `-`（在某些上下文中）
- **推荐做法**: 用普通文本替代代码片段，使用空格分隔而非特殊符号
- **错误示例**: `A["Developer runs \`sh scripts/dev.sh\`"]`
- **正确示例**: `A["Developer runs sh scripts/dev.sh"]`

## 规则 9: 避免在节点文本中使用 HTML 标签

在 Mermaid 节点文本中不应包含 HTML 标签，这会导致渲染错误：

- **避免使用**: HTML 标签如 `<img>`、`<br/>`、`<div>` 等
- **推荐做法**: 使用纯文本描述，如需图标可考虑使用 Font Awesome 语法
- **错误示例**: `A["<img src='...' width='40' /><br/>Service Name"]`
- **正确示例**: `A["Service Name"]` 或 `A["fa:fa-database Service Name"]`

### 序列图中的特殊处理

在序列图的消息文本中，同样需要避免这些字符：

- **错误示例**: `A->>B: "{ status: 'processing' }"`
- **正确示例**: `A->>B: "status: processing"`

## 规则摘要

| 元素 | 处理方式 | 核心要点 |
|:---|:---|:---|
| 节点/链接/子图标题 | `A["文本"]` | **所有文本都用双引号包裹** |
| 结束关键字 `end` | 独占一行 | 避免与节点名或链接混淆 |
| 子图连接 | 在 `subgraph` 外部定义 | **先定义好所有子图，再处理它们与外部的连接** |
| 顶层 `graph` | 无需 `end` 结尾 | **只有 `subgraph` 才配对 `end`** |
| 链接文本 | `A -- "描述文字" --> B` | **避免使用 `1. xxx` 这样的编号** |
| 节点高亮 | `style NodeID fill:#...` | **使用 `style` 语句进行精确控制，ID不能带引号** |
| 序列图激活 | `A->>+B:` 配对 `B-->>-A:` | **确保激活/去激活平衡** |
| 节点文本特殊字符 | 避免反引号和特殊符号 | **避免 `` ` ``、`{}`、`'`、`-` 等冲突字符** |
| 节点文本HTML标签 | 避免HTML标签 | **避免 `<img>`、`<br/>`、`<div>` 等HTML元素** |

通过遵循这些规则，可以确保我们所有设计文档中的架构图和流程图都能保持清晰、准确和可维护。
