---
alwaysApply: true
---
# 开发工作流自动化规则

本规则定义了在项目开发和测试周期中必须遵循的自动化工作流，旨在提升效率并确保环境一致性。

## 1. 自动化容器管理

**核心原则**：开发和测试活动必须在与 `docs/design/10-containerization-and-dev-environment.md` 设计一致的容器化环境中进行。

- **测试时的自动环境启动**：
  - 当需要针对任一微服务（如 `user-service`, `ai-agent-service` 等）运行测试时，**必须** 自动使用 `docker-compose` 和相应的 `profile` 启动该服务及其所有依赖项（如数据库、消息队列）的容器。
  - **示例**: 如果要测试 `user-service`，则应通过 `sh scripts/dev.sh up user` (或等效的 `docker-compose` 命令) 来准备测试环境。

## 2. 自动化构建流程

- **开发过程中的自动构建**：
  - 在修改任何服务的源代码后，**必须** 自动触发该服务的依赖安装和 Docker 镜像的重新构建。
  - 这通常通过 `docker-compose up --build` 或 `sh scripts/dev.sh up <profile> --build` 来实现，确保最新的代码变更被打包到镜像中。

## 3. 依赖变更自动感知与更新

**核心原则**：新增的 Python 依赖必须通过重建 Docker 镜像来更新到运行环境中，以确保环境的绝对一致性。代码热更新只针对源代码文件。

- **Python 服务依赖更新工作流**:
  1.  开发者在**主机**上修改对应服务的 `requirements.txt` 文件。
  2.  开发者**必须**运行 `docker-compose build <service-name>` 来重新构建服务的镜像。这会将新的依赖安装到容器内置的 `.venv` 中。
  3.  重新启动服务 (`sh scripts/dev.sh up <profile>`)。容器将使用包含最新依赖的新镜像。

## 4. 自动化测试与构建环境

**核心原则**：所有运行和测试必须在容器化环境中自动进行，确保环境一致性。

- **自动容器化执行**：
  - 任何代码运行、测试、脚本执行都必须通过 `sh scripts/dev.sh` 在容器中进行。
  - 禁止在主机直接运行业务代码，除非是 `setup-dev-env.sh` 等环境初始化脚本。
  - **示例**: `sh scripts/dev.sh up agent-tests` 而不是在主机运行 `pytest`。

- **热重载与实时同步**：
  - **源代码**的修改通过卷挂载（例如 `src/user-service/app:/app/app`）实现实时同步。
  - 容器内的 `uvicorn --reload` 会自动检测源代码变化并重新加载服务。
  - **依赖**的变更**不会**自动同步，必须通过重建镜像来更新。

## 5. 开发环境生命周期管理

- **环境初始化**：
  - 首次启动或环境损坏时，运行 `sh scripts/setup-dev-env.sh` 初始化**本地 IDE 支持环境**。
  - 该脚本为本地 IDE（如 VS Code）创建 `.venv`，用于代码补全和静态检查，**此 `.venv` 不被容器使用**。

- **日常开发循环**：
  1. 修改代码 (`.py` 文件) → `uvicorn` 在容器内自动热重载。
  2. 添加依赖 (`requirements.txt` 文件) → 在主机修改文件 → 运行 `docker-compose build <service>` → 重启服务。
  3. 运行测试 → `sh scripts/dev.sh up <service>-tests`。
  4. 查看日志 → `sh scripts/dev.sh logs <service>`。

## 6. 自动化环境资源管理

**核心原则**：为了减少笔记本电脑的资源消耗，在运行或测试结束时必须自动关闭运行的环境。

- **任务完成后自动清理**：
  - 开发任务、测试任务完成后，**必须** 自动关闭相关的 Docker 容器
  - 使用 `sh scripts/dev.sh down` 或 `docker-compose down` 关闭所有服务
  - **示例**: 完成 AI Agent Service 测试后，执行 `sh scripts/dev.sh down` 释放资源

- **智能资源管理**：
  - 长时间不活跃的容器应自动停止
  - 保留数据卷（volumes），只停止运行中的容器
  - 基础设施服务（数据库、Redis）可以选择性保留，但应用服务必须关闭

- **环境状态检查**：
  - 在开始新任务前，检查并清理之前的环境
  - 使用 `docker-compose ps` 检查运行状态
  - 必要时先执行 `sh scripts/dev.sh down` 再启动新环境

## 7. AI 助手执行准则

作为 AI 助手，在协助开发时，你必须自动感知并执行以上规则：

- **环境准备**：在执行任何开发任务前，确保容器环境已启动。
- **依赖管理**：新增依赖时，在主机更新 `requirements.txt`，然后指导进行镜像重建。
- **代码执行**：所有业务代码运行必须在容器中进行。
- **测试执行**：使用 `sh scripts/dev.sh up <service>-tests` 运行测试。
- **构建更新**：当 `requirements.txt` 发生变更后，使用 `docker-compose build <service-name>` 重新构建镜像。
- **环境一致性**：确保开发、测试、生产环境的一致性。
- **自动清理**：任务完成后必须自动执行 `sh scripts/dev.sh down` 关闭环境。
