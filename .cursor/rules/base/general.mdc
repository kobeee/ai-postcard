---
alwaysApply: true
---
# 项目通用规范

## 技术栈
- **后端**: Python 3.11, FastAPI, Uvicorn
- **数据库**: PostgreSQL
- **缓存/消息队列**: Redis
- **容器化**: Docker, Docker Compose
- **前端 (小程序)**: WXML, WXSS, JavaScript

## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用一致且描述性的目录和文件命名，反映其用途和内容
- **模块化**：相关功能放在同一模块，减少跨模块依赖
- **适当嵌套**：避免过深的目录嵌套，一般不超过3-4层
- **资源分类**：区分代码、资源、配置和测试文件
- **依赖管理**：集中管理依赖，避免多处声明
- **约定优先**：遵循语言或框架的标准项目结构约定
- **每次目录结构发生变化时，自动更新.cursor/rules/base/project-structure.mdc**

## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接）
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：为复杂逻辑添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息

# 经验教训与重构原则
1. 抽象基类的方法签名必须严格匹配，重构时不可随意更改接口契约
2. 调用方的参数传递必须与接口定义保持一致，避免运行时参数数量或类型错误
3. 进行大幅重构时，建议分步进行，每一步都要进行集成测试，确保整个调用链无误
4. 任何重构后都必须进行端到端集成测试，验证所有核心功能和API接口
5. 发现接口兼容性问题时，优先回溯基类和调用方的签名与参数，保持一致性
6. 记录每次重构和修复的经验教训，持续完善开发规范

## 响应语言
- 始终使用中文回复用户

## 本项目规则文件说明
本项目使用以下规则文件：
- .cursor/rules/base/general.mdc：通用规范（本文件）
- .cursor/rules/base/project-structure.mdc：项目目录结构规范
- .cursor/rules/base/document.mdc：文档规范
- .cursor/rules/base/git.mdc：Git提交规范
- .cursor/rules/base/development-workflow.mdc: 开发工作流自动化规则
- .cursor/rules/base/mermaid-syntax.mdc: Mermaid 图表语法规则
- .cursor/rules/framework/xxx.mdc：XXX 框架开发规范
- .cursor/rules/language/xxx.mdc：XXX 语言开发规范
