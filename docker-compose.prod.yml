# =============================================================================
# AI 明信片项目 - 生产环境 Docker Compose 配置
# =============================================================================
# 功能：为生产环境提供优化的容器编排
# 特性：
#   - 使用生产级Dockerfile
#   - 优化的资源限制和健康检查
#   - 安全的网络配置
#   - 数据持久化保证
#   - 日志管理
# =============================================================================

# 通用环境变量模板 - 生产版本
x-common-variables: &common-variables
  environment:
    - NODE_ENV=production
    - PYTHONUNBUFFERED=1
    - PYTHONDONTWRITEBYTECODE=1
    - TZ=UTC

# Python服务通用配置 - 生产版本
x-python-service: &python-service
  <<: *common-variables
  env_file:
    - .env
  restart: unless-stopped
  networks:
    - app-network
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"
  # 生产环境资源限制
  deploy:
    resources:
      limits:
        memory: 1G
      reservations:
        memory: 512M

services:
  # =============================================================================
  # 应用服务层
  # =============================================================================

  # API 网关服务
  gateway-service:
    <<: *python-service
    container_name: ai-postcard-gateway-prod
    build:
      context: ./src/gateway-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "8083:8000"
    volumes:
      # 只挂载配置和日志目录
      - ./logs/gateway:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - GATEWAY_ENV=production
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - gateway
      - all

  # 用户服务
  user-service:
    <<: *python-service
    container_name: ai-postcard-user-prod
    build:
      context: ./src/user-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "8081:8000"
    volumes:
      - ./logs/user:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - USER_SERVICE_ENV=production
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - user
      - all

  # 明信片服务
  postcard-service:
    <<: *python-service
    container_name: ai-postcard-postcard-prod
    build:
      context: ./src/postcard-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "8082:8000"
    volumes:
      - ./logs/postcard:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTCARD_SERVICE_ENV=production
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - postcard
      - all

  # AI Agent 主服务
  ai-agent-service:
    <<: *python-service
    container_name: ai-postcard-ai-agent-prod
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "8080:8000"
    volumes:
      - ./logs/ai-agent:/app/logs:rw
      - ./data/ai-agent/static:/app/app/static:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - AI_AGENT_ENV=production
      - LOG_LEVEL=info
      - AI_AGENT_PUBLIC_URL=${AI_AGENT_PUBLIC_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # AI Agent需要更多资源
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    profiles:
      - agent
      - all

  # AI Agent 工作进程
  ai-agent-worker:
    <<: *python-service
    # 注意：使用 replicas 时不能设置 container_name
    build:
      context: ./src/ai-agent-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    command: ["python", "-m", "app.worker"]
    volumes:
      - ./logs/ai-agent:/app/logs:rw
      - ./data/ai-agent/static:/app/app/static:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - AI_AGENT_ENV=production
      - LOG_LEVEL=info
      - WORKER_MODE=true
    # Worker进程可以配置多个实例
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, password='${REDIS_PASSWORD}'); print('OK' if r.ping() else 'FAIL')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - worker
      - agent
      - all

  # =============================================================================
  # 基础设施服务层
  # =============================================================================

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai-postcard-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-ai_postcard}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - TZ=UTC
    ports:
      - "5432:5432"
    volumes:
      # 生产环境数据持久化
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      # 注释掉外部日志挂载，使用Docker日志系统
      # - ./logs/postgres:/var/log/postgresql:rw
      - /etc/localtime:/etc/localtime:ro
    # PostgreSQL 配置优化 - 修改为使用容器日志系统
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=off
      -c log_min_duration_statement=1000
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${DB_NAME:-ai_postcard}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - app-network

  # Redis 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: ai-postcard-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --tcp-backlog 511
      --timeout 300
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      # 注释掉外部日志挂载，使用Docker日志系统
      # - ./logs/redis:/var/log/redis:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=UTC
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Redis 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - app-network

  # =============================================================================
  # 监控和管理服务 (可选)
  # =============================================================================

  # Nginx 反向代理 (生产环境推荐)
  nginx:
    image: nginx:alpine
    container_name: ai-postcard-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx:rw
      - /etc/localtime:/etc/localtime:ro
      # SSL证书目录 (如果使用HTTPS)
      # - ./certs:/etc/nginx/certs:ro
    depends_on:
      - gateway-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    profiles:
      - nginx
      - production
      - all

# =============================================================================
# 网络配置
# =============================================================================
networks:
  app-network:
    name: ai-postcard-prod-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# 数据卷配置
# =============================================================================
volumes:
  # PostgreSQL 数据持久化
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres

  # Redis 数据持久化  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

  # 应用日志持久化
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs

# =============================================================================
# 配置文件说明
# =============================================================================
# 1. 环境变量文件：
#    - .env (必需) - 包含所有敏感配置
#
# 2. 生产环境目录结构：
#    ├── data/           # 数据持久化目录
#    │   ├── postgres/   # 数据库数据
#    │   ├── redis/      # Redis数据
#    │   └── ai-agent/   # AI服务生成文件
#    ├── logs/           # 日志目录
#    │   ├── gateway/    # 网关日志
#    │   ├── user/       # 用户服务日志
#    │   ├── postcard/   # 明信片服务日志
#    │   ├── ai-agent/   # AI服务日志
#    │   ├── postgres/   # 数据库日志
#    │   ├── redis/      # Redis日志
#    │   └── nginx/      # Nginx日志
#    └── configs/        # 配置文件
#        ├── nginx/      # Nginx配置
#        └── postgres/   # 数据库初始化脚本
#
# 3. 启动命令：
#    sh scripts/prod.sh up all        # 启动所有服务
#    sh scripts/prod.sh up gateway    # 启动API网关
#    sh scripts/prod.sh logs nginx    # 查看Nginx日志
#    sh scripts/prod.sh down          # 停止所有服务
# =============================================================================